//Recursive approach



public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
		//Your code goes here
		return Helper(weights,values,n,maxWeight,0);
	}

	public static int Helper(int[]weights,int[]values,int n,int maxWeight,int i){
             
			 if(i==values.length){
				 return 0;
			 }
			 int ans;
			 if(weights[i]<=maxWeight){
				 	int ans1 = values[i] + Helper(weights, values, n, maxWeight - weights[i], i + 1);
					int ans2 = Helper(weights, values, n, maxWeight, i + 1);
					ans =  Math.max(ans1, ans2);
				
			 }
			 else{
			    ans=Helper(weights,values,n,maxWeight,i+1);
			 }
			 return ans;
	}

}


// Iterative approach






public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
		//Your code goes here
	int [][]dp=new int[weights.length+1][maxWeight+1];

	for(int i=n-1; i>=0; i--){
		for(int w=0; w<=maxWeight; w++){
          int ans;
			if(weights[i]<=w){
             int ans1=values[i]+dp[i+1][w-weights[i]];
			 int ans2=dp[i+1][w];
			 ans=Math.max(ans1,ans2);
			}
			else{
				ans=dp[i+1][w];
			}
			dp[i][w] = ans;
		}
	
	}
	return dp[0][maxWeight];
	}
}
